buildscript {
    ext.kotlin_version = '1.3.30'
    ext.kotlin_coroutines_version = '1.1.1'
    ext.sparkjava_version = '2.8.0'
    ext.sparkjava_thymeleaf_version = '2.7.1'
    ext.sparkjava_pac_version = '2.2.0'
    ext.pac4j_version = '2.2.1'
    ext.exposed_version = '0.13.2'
    ext.slf4j_version = '1.7.25'
    ext.aws_sdk_version = '1.11.538'
    ext.gson_version = '2.8.5'
    ext.postgis_jdbc_version = '2.2.1'
    ext.hikaricp_version = '3.3.1'
    ext.fuel_version = '1.16.0'

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.1"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'application'

group 'com.dymesolutions.linkedevents'
version '1.0.7'
mainClassName = 'com.dymesolutions.linkedevents.App'


sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin']
    main.resources.srcDirs = ['src/main/resources']
}

sourceCompatibility = 1.8
compileKotlin { kotlinOptions.jvmTarget = "1.8" }
compileTestKotlin { kotlinOptions.jvmTarget = "1.8" }

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/exposed" }
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.exposed:exposed:$exposed_version"
    implementation "com.sparkjava:spark-core:$sparkjava_version"
    implementation "com.sparkjava:spark-template-thymeleaf:$sparkjava_thymeleaf_version"
    implementation "org.pac4j:spark-pac4j:$sparkjava_pac_version"
    implementation "org.pac4j:pac4j-oauth:$pac4j_version"
    implementation "org.pac4j:pac4j-http:$pac4j_version"
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.amazonaws:aws-java-sdk-s3:$aws_sdk_version"
    implementation "com.amazonaws:aws-java-sdk-sns:$aws_sdk_version"
    implementation "org.slf4j:slf4j-simple:$slf4j_version"
    implementation "net.postgis:postgis-jdbc:$postgis_jdbc_version"
    implementation "com.zaxxer:HikariCP:$hikaricp_version"
    implementation "com.github.kittinunf.fuel:fuel:$fuel_version"
    implementation 'org.apache.commons:commons-email:1.5'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

jar {
    manifest {
        attributes(
            "Implementation-Title": project.name,
            "Main-Class": mainClassName,
            "Implementation-Version": project.version,
            "Implementation-Build": getGitHash(),
            "Implementation-Vendor": "Dyme Solutions Oy",
            "Implementation-Vendor-Id": "com.dymesolutions",
            "Built-By": System.getProperty('user.name'),
            "Build-Jdk": System.getProperty('java.version'),
            "Build-Time": new Date().format("yyyy-MM-dd HH:mm:ss Z"))
    }
}

run {
    if (project.hasProperty("appArgs")) {
        args appArgs
    }
}

shadowJar {
    baseName = project.name
    classifier = null
    version = project.version
}
